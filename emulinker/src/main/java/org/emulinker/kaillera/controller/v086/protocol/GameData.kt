package org.emulinker.kaillera.controller.v086.protocol

import java.nio.ByteBuffer
import org.emulinker.kaillera.controller.messaging.MessageFormatException
import org.emulinker.kaillera.controller.v086.V086Utils
import org.emulinker.util.UnsignedUtil.getUnsignedShort
import org.emulinker.util.UnsignedUtil.putUnsignedShort

data class GameData
@Throws(MessageFormatException::class)
constructor(override val messageNumber: Int, val gameData: ByteArray) : V086Message() {
  override val messageTypeId = ID

  override val bodyBytes = V086Utils.Bytes.SINGLE_BYTE + V086Utils.Bytes.SHORT + gameData.size

  public override fun writeBodyTo(buffer: ByteBuffer) {
    GameDataSerializer.write(buffer, this)
  }

  // Method generated by Intellij.
  override fun equals(other: Any?): Boolean {
    if (this === other) return true
    if (javaClass != other?.javaClass) return false

    other as GameData

    if (messageNumber != other.messageNumber) return false
    if (!gameData.contentEquals(other.gameData)) return false
    if (messageTypeId != other.messageTypeId) return false
    if (bodyBytes != other.bodyBytes) return false

    return true
  }

  // Method generated by Intellij.
  override fun hashCode(): Int {
    var result = messageNumber
    result = 31 * result + gameData.contentHashCode()
    result = 31 * result + messageTypeId
    result = 31 * result + bodyBytes
    return result
  }

  init {
    require(gameData.isNotEmpty()) { "gameData is empty" }
    require(gameData.size in 0..0xFFFF) { "gameData size out of range: ${gameData.size}" }
  }

  companion object {
    const val ID: Byte = 0x12

    // TODO(nue): Get rid of this.
    @Throws(Exception::class)
    fun main() {
      val data = ByteArray(9)
      val st = System.currentTimeMillis()
      val msg: GameData = create(0, data)
      val byteBuffer = ByteBuffer.allocateDirect(4096)
      for (i in 0..0xfffe) {
        msg.writeTo(byteBuffer)
        byteBuffer.clear()
      }
      println("et=" + (System.currentTimeMillis() - st))
    }

    /** Same as the constructor, but it makes a deep copy of the array. */
    @Throws(MessageFormatException::class)
    fun create(messageNumber: Int, gameData: ByteArray): GameData {
      return GameData(messageNumber, gameData.copyOf(gameData.size))
    }
  }

  object GameDataSerializer : MessageSerializer<GameData> {
    override val messageTypeId: Byte = ID

    override fun read(buffer: ByteBuffer, messageNumber: Int): MessageParseResult<GameData> {
      if (buffer.remaining() < 4) {
        return MessageParseResult.Failure("Failed byte count validation!")
      }
      buffer.get() // This is always 0x00.
      val dataSize = buffer.getUnsignedShort()
      if (dataSize <= 0 || dataSize > buffer.remaining()) {
        return MessageParseResult.Failure("Invalid Game Data format: dataSize = $dataSize")
      }
      val gameData = ByteArray(dataSize)
      buffer[gameData]
      return MessageParseResult.Success(create(messageNumber, gameData))
    }

    override fun write(buffer: ByteBuffer, message: GameData) {
      buffer.put(0x00.toByte())
      buffer.putUnsignedShort(message.gameData.size)
      buffer.put(message.gameData)
    }
  }
}
